document = prolog, element, misc*;

prolog = xml-decl, misc*, (doctype-decl, misc*)?;
xml-decl = '<?xml', version_info, encoding-decl?, sd-decl?, S?, '?>';
version-info = S, 'version', eq, ("'", version-num, "'" | '"', version-num, '"');
eq = S?, '=', S?;
version-num = '1.', [0-9]+;
misc = comment | pi | S;

doctype-decl = '<!DOCTYPE', S, name, (S, external-id)?, S?, ('[', int-subset, ']', S?)?, '>';
decl-sep = pe-reference
         | S;
sd-decl = S, 'standalone', eq, (("'", ('yes' | 'no'), "'") | ('"', ('yes' | 'no'), '"'));

int-subset = (markup-decl | decl-sep)*;
markup-decl = element-decl
            | attlist-decl
            | entity-decl
            | notation-decl
            | pi
            | comment;

ext-subset = text-decl? ext-subset-decl
ext-subset-decl = (markup-decl | conditional-sect | decl-sep)*;

char = #x9
     | #xA
     | #xD 
     | [#x20-#xD7FF]
     | [#xE000-#xFFFD]
     | [#x10000-#x10FFFF];
S = (#x20 | #x9 | #xD | #xA)+;
name-start-char = ":"
                | [A-Z]
                | "_"
                | [a-z]
                | [#xC0-#xD6]
                | [#xD8-#xF6]
                | [#xF8-#x2FF]
                | [#x370-#x37D]
                | [#x37F-#x1FFF]
                | [#x200C-#x200D]
                | [#x2070-#x218F]
                | [#x2C00-#x2FEF]
                | [#x3001-#xD7FF]
                | [#xF900-#xFDCF]
                | [#xFDF0-#xFFFD]
                | [#x10000-#xEFFFF];
name-char = name-start-char
          | "-"
          | "."
          | [0-9]
          | #xB7
          | [#x0300-#x036F]
          | [#x203F-#x2040];
name = name-start-char (name-char)*;
names = name (#x20 name)*;
nmtoken = (name-char)+;
nmtokens = nmtoken (#x20 nmtoken)*;

entity-value = '"', ([^%&"] | pe-reference | reference)*, '"'
             | "'", ([^%&'] | pe-reference | reference)*, "'";
att-value = '"', ([^<&"] | reference)* '"'
          | "'", ([^<&'] | reference)* "'";
system-literal = ('"', [^"]*, '"')
               | ("'", [^']*, "'");
pubid-literal = '"', pubid-char, '"'
              | "'", (pubid-char - "'")*, "'";
pubid-char = #x20
           | #xD
           | #xA
           | [a-zA-Z0-9]
           | [-'()+,./:=?;!*#@$_%];
char-data = [^<&]* - ([^<&]*, ']]>', [^<&]*);

comment = '<!--', ((char - '-') |('-', (char - '-')))*, '-->';

pi = '<?' pi-target, (S, (char* - (char*, '?>', char*)))?, '?>';
pi-target = name - (('X' | 'x'), ('M' | 'm'), ('L' | 'l'));

cdsect = cdstart, cdata, cdend;
cdstart = '<![CDATA[';
cdata = (char* - (char*, ']]>', char*));
cdend = ']]>';

element = empty-elem-tag
        | stag, content, etag;
stag = '<', name, (S, attribute)*, S?, '>';
attribtue = name, eq, att-value;
etag = '</', name, S?, '>';

content = char-data?, ((element | reference | cdsect | pi | comment), char-data?)*;

empty-elem-tag = '<', name, (S, attribute)*, S?, '/>';

element-decl = '<!ELEMENT', S, name, S, content-spec, S?, '>';
content-spec = 'EMPTY'
             | 'ANY'
             | mixed
             | children;

children = (choice | seq), ('?' | '*' | '+')?;
cp = (name | choice | seq), ('?' | '*' | '+')?;
choice = '(', S?, cp, (S?, '|', S?, cp)+, S?, ')';
seq = '(', S?, cp, (S?, ',', S?, cp)*, S?, ')';
mixed = '(', S?, '#PCDATA', (S?, '|', S?, name)*, S?, ')*'
      | '(', S?, '#PCDATA', S?, ')';

att-list-decl = '<!ATTLIST', S, name, att-def*, S?, '>';
att-def = S, name, S, att-type, S, default-decl;

att-type = string-type, tokenized-type, enumerated-type;
string-type = 'CDATA';
tokenized-type = 'ID'
               | 'IDREF'
               | 'IDREFS'
               | 'ENTITY'
               | 'ENTITIES'
               | 'NMTOKEN'
               | 'NMTOKENS';
enumerated-type = notation-type
                | enumeration;
notation-type = 'NOTATION', S, '(', S? name (S?, '|', S?, name)*, S?, ')';
enumeration = '(', S?, nmtoken, (S?, '|', S?, nmtoken)*, S?, ')';

default-decl = '#REQUIRED'
             | '#IMPLIED'
             | (('#FIXED', S)?, att-value);

conditional-sect = include-sect
                 | ignore-sect;
include-sect = '<![', S?, 'INCLUDE', S?, '[', ext-subset-decl, ']]>';
ignore-sect = '<![', S?, 'IGNORE', S?, '[', ignore-sect-contents*, ']]>';
ignore-sect-contents = ignore, ('<![', ignore-sect-contents, ']]>', ignore)*;
ignore = char* - (char*, ('<![' | ']]>'), char*);

char-ref = '&#', [0-9]+, ';'
         | '&#x', [0-9a-fA-F]+, ';';

reference = entity-ref
          | char-ref;
entity-ref = '&', name, ';';
pe-reference = '%', name, ';';

entity-decl = ge-decl
            | pe-decl;
ge-decl = '<!ENTITY', S, name, S, entity-def, S?, '>';
pe-decl = '<!ENTITY', S, '%', S, name, S, pe-def, S?, '>';
entity-def = entity-value
           | (external-id, ndata-decl?);
pe-def = entity-value
       | external-id;

external-id = 'SYSTEM', S, system-literal
            | 'PUBLIC', S, pubid-literal, S, system-literal;
ndata-decl = S, 'NDATA', S, name;

text-decl = '<?xml', version-info?, encoding-decl, S?, '?>';

ext-parsed-ent = text-decl?, content;

encoding-decl = S, 'encoding', eq, ('"', enc-name, '"' | "'", enc-name, "'");
enc-name = [A-Za-z], ([A-Za-z0-9._] | '-')*;

notation-decl = '<!NOTATION', S, name, S, (external-id | public-id), S?, '>';
public-id = 'PUBLIC', S, pubid-literal;
